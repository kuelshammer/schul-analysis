{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "import marimo as mo\n",
                "import numpy as np\n",
                "from schul_analysis.ganzrationale import GanzrationaleFunktion",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# ðŸ”¥ Perfekte Parabel-Darstellung mit Plotly\n",
                "\n",
                "Dieses Notebook demonstriert die mathematisch korrekte Darstellung von Parabeln mit Plotly, die KEINE Verzerrung aufweist - perfekt fÃ¼r den Schulunterricht!",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 1. Einfache Parabel f(x) = xÂ² - 4x + 3"],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Parabel erstellen\n",
                "f1 = GanzrationaleFunktion([1, -4, 3])\n",
                "\n",
                'print(f"Term: {f1.term()}")\n',
                'print(f"LaTeX: {f1.term_latex()}")\n',
                'print(f"Nullstellen: {f1.nullstellen()}")\n',
                'print(f"Extremstellen: {f1.extremstellen()}")',
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# ðŸ”¥ PERFECT PARABOLIC REPRESENTATION\n",
                "parabel1 = f1.perfekte_parabel_plotly(x_range=(-2, 6))\n",
                "parabel1",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Was macht diese Darstellung perfekt?\n",
                "\n",
                '- âœ… **1:1 Aspect Ratio**: `scaleanchor="y", scaleratio=1` verhindert Verzerrung\n',
                "- âœ… **Achsen im Ursprung**: Schwarze Null-Linien fÃ¼r besseres Ablesen\n",
                "- âœ… **Scheitelpunkt markiert**: Deutliche Markierung mit Koordinaten\n",
                "- âœ… **Gitterlinien**: Hilft beim prÃ¤zisen Ablesen von Werten\n",
                "- âœ… **Keine Verzerrung**: Parabel sieht aus wie in SchulbÃ¼chern!",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 2. Vergleich: Plotly vs. Verzerrte Darstellung"],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Normale Plotly-Darstellung (mathematisch korrekt)\n",
                "korrekt = f1.zeige_funktion_plotly(x_range=(-2, 6))\n",
                "korrekt",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 3. Verschiedene Parabel-Typen"],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Parabel nach oben Ã¶ffnend\n",
                "f2 = GanzrationaleFunktion([2, -8, 6])  # 2xÂ² - 8x + 6\n",
                "parabel2 = f2.perfekte_parabel_plotly(x_range=(-1, 5))\n",
                "parabel2",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Parabel nach unten Ã¶ffnend\n",
                "f3 = GanzrationaleFunktion([-1, 4, -3])  # -xÂ² + 4x - 3\n",
                "parabel3 = f3.perfekte_parabel_plotly(x_range=(-1, 5))\n",
                "parabel3",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Verschobene Parabel\n",
                "f4 = GanzrationaleFunktion([1, 2, -8])  # xÂ² + 2x - 8\n",
                "parabel4 = f4.perfekte_parabel_plotly(x_range=(-5, 3))\n",
                "parabel4",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 4. Nullstellen-Visualisierung"],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Parabel mit zwei Nullstellen\n",
                "f5 = GanzrationaleFunktion([1, -5, 6])  # xÂ² - 5x + 6\n",
                'print(f"Nullstellen: {f5.nullstellen()}")\n',
                "nullstellen_chart = f5.zeige_nullstellen_plotly(x_range=(-1, 6))\n",
                "nullstellen_chart",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Parabel ohne reelle Nullstellen\n",
                "f6 = GanzrationaleFunktion([1, -2, 3])  # xÂ² - 2x + 3\n",
                'print(f"Nullstellen: {f6.nullstellen()}")\n',
                "keine_nullstellen = f6.zeige_nullstellen_plotly(x_range=(-3, 5))\n",
                "keine_nullstellen",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 5. Ableitungsvergleich"],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Funktion und erste Ableitung\n",
                "f7 = GanzrationaleFunktion([1, -3, -4, 2])  # xÂ³ - 3xÂ² - 4x + 2\n",
                "ableitung_chart = f7.zeige_ableitung_plotly(ordnung=1, x_range=(-3, 5))\n",
                "ableitung_chart",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 6. Interaktiver Parameter-Vergleich"],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Parameter-Sliders\n",
                'a_slider = mo.ui.slider(-3, 3, value=1, step=0.1, label="a")\n',
                'b_slider = mo.ui.slider(-5, 5, value=0, step=0.1, label="b")\n',
                'c_slider = mo.ui.slider(-5, 5, value=0, step=0.1, label="c")\n',
                "\n",
                "a_slider, b_slider, c_slider",
            ],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "@mo.cell\n",
                "def zeige_interaktive_parabel():\n",
                "    # Neue Funktion mit Slider-Werten\n",
                "    f_interaktiv = GanzrationaleFunktion([a_slider.value, b_slider.value, c_slider.value])\n",
                "    \n",
                "    # LaTeX-Darstellung\n",
                '    latex_output = mo.md(f"## $$f(x) = {f_interaktiv.term_latex()}$$")\n',
                "    \n",
                "    # Nullstellen berechnen\n",
                "    nullstellen = f_interaktiv.nullstellen()\n",
                "    if nullstellen:\n",
                "        nullstellen_text = f\"Nullstellen: {', '.join([f'{ns:.2f}' for ns in nullstellen])}\"\n",
                "    else:\n",
                '        nullstellen_text = "Keine reellen Nullstellen"\n',
                "    \n",
                "    # Visualisierung\n",
                "    chart = f_interaktiv.perfekte_parabel_plotly(x_range=(-5, 5))\n",
                "    \n",
                "    return mo.vstack([\n",
                "        latex_output,\n",
                '        mo.md(f"**{nullstellen_text}**"),\n',
                "        chart\n",
                "    ])\n",
                "\n",
                "zeige_interaktive_parabel()",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["## 7. Mathematische Analyse"],
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Detaillierte Analyse einer Parabel\n",
                "f_analyse = GanzrationaleFunktion([1, -4, 3])\n",
                "\n",
                "# LÃ¶sungsweg anzeigen\n",
                'print("=== LÃ–SUNGSWEG NULLSTELLEN ===")\n',
                "print(f_analyse.nullstellen_weg())",
            ],
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## ðŸ”¥ ZUSAMMENFASSUNG\n",
                "\n",
                "### Warum Plotly UNERLÃ„SSLICH fÃ¼r Schul-Mathematik ist:\n",
                "\n",
                '1. **ðŸ”¥ Aspect Ratio Control**: `scaleanchor="y", scaleratio=1` verhindert Verzerrung\n',
                "2. **ðŸ”¥ Mathematical Accuracy**: Parabeln sehen aus wie Parabeln, nicht wie Ellipsen\n",
                "3. **ðŸ”¥ Educational Standards**: Entspricht den Konventionen aus SchulbÃ¼chern\n",
                "4. **ðŸ”¥ Interactive Learning**: SchÃ¼ler kÃ¶nnen zoomen ohne mathematische Korrektheit zu verlieren\n",
                "5. **ðŸ”¥ Professional Output**: Drucker- und prÃ¤sentationsreife Grafiken\n",
                "\n",
                "### ðŸš« Problem bei anderen Paketen:\n",
                "\n",
                "- **Altair**: Kein Aspect Ratio Control â†’ Parabeln werden immer verzerrt\n",
                "- **Matplotlib**: Keine interaktive Aspect Ratio Kontrolle\n",
                "- **Standard-Plotly**: Ohne `scaleanchor` ebenfalls verzerrt\n",
                "\n",
                'Die perfekte mathematische Konfiguration mit `scaleanchor="y", scaleratio=1` ist der SchlÃ¼ssel fÃ¼r verzerrungsfreie Darstellung!',
            ],
        },
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3",
        },
        "language_info": {
            "codemirror_mode": {"name": "ipython", "version": 3},
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.9.0",
        },
    },
    "nbformat": 4,
    "nbformat_minor": 4,
}
