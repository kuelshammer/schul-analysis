"""
Trigonometrische Funktionen f√ºr das Schul-Analysis Framework.

Einfache Implementierung f√ºr trigonometrische Funktionen wie sin(x), cos(x), etc.
"""

from typing import Union

import sympy as sp
from sympy import diff, latex, solve

from .funktion import Funktion
from .sympy_types import VALIDATION_EXACT, validate_function_result


class TrigonometrischeFunktion(Funktion):
    """
    P√§dagogischer Wrapper f√ºr trigonometrische Funktionen.

    Beispiele:
    - sin(x)
    - cos(2x) + sin(x)
    - tan(x/2)
    """

    def __init__(self, eingabe: Union[str, sp.Basic, "Funktion"]):
        """
        Konstruktor f√ºr trigonometrische Funktionen.

        Args:
            eingabe: String, SymPy-Ausdruck oder Funktion-Objekt
        """
        # üî• P√ÑDAGOGISCHER WRAPPER - Keine komplexe Logik mehr! üî•

        # Speichere die urspr√ºngliche Eingabe f√ºr Validierung
        self.original_eingabe = str(eingabe)

        # üî• UNIFIED ARCHITECTURE: Delegiere an Basis-Klasse üî•
        # Konstruiere die Eingabe f√ºr die Basisklasse
        if isinstance(eingabe, str):
            super().__init__(eingabe)
        elif isinstance(eingabe, sp.Basic):
            super().__init__(eingabe)
        elif isinstance(eingabe, Funktion):
            super().__init__(eingabe.term())
        else:
            raise TypeError(f"Unsupported input type: {type(eingabe)}")

        # üî• P√ÑDAGOGISCHE VALIDIERUNG mit deutscher Fehlermeldung üî•
        if not self.ist_trigonometrisch:
            raise TypeError(
                f"Die Eingabe '{self.original_eingabe}' ist keine trigonometrische Funktion! "
                "Eine trigonometrische Funktion muss sin(x), cos(x), tan(x) oder √§hnliche Funktionen enthalten. "
                "Hast du vielleicht eine ganzrationale, gebrochen-rationale oder exponentiale Funktion gemeint?"
            )

        # üî• CACHE f√ºr wiederholte Berechnungen
        self._cache = {}

    def nullstellen(self, real: bool = True, runden=None) -> list[sp.Basic]:
        """
        Berechnet die Nullstellen der trigonometrischen Funktion.

        Args:
            real: Nur reelle Nullstellen zur√ºckgeben
            runden: Anzahl Nachkommastellen f√ºr Rundung

        Returns:
            Liste der Nullstellen
        """
        # üî• UNIFIED ARCHITECTURE: Verwende Basis-Klassen-Properties üî•
        try:
            # Verwende SymPy's solve f√ºr die Gleichung
            l√∂sungen = solve(self.term_sympy, self._variable_symbol)

            nullstellen_liste = []
            for l√∂sung in l√∂sungen:
                if real and l√∂sung.is_real is False:
                    continue

                if runden is not None and l√∂sung.is_real:
                    nullstellen_liste.append(round(float(l√∂sung), runden))
                else:
                    nullstellen_liste.append(l√∂sung)

            return nullstellen_liste

        except (AttributeError, TypeError, ValueError) as e:
            # F√ºr komplexe trigonometrische Funktionen: leere Liste zur√ºckgeben
            # Logge den Fehler f√ºr Debugging-Zwecke
            import logging

            logging.debug(
                f"Nullstellen-Berechnung fehlgeschlagen f√ºr {self.term()}: {e}"
            )
            return []

    def ableitung(self, ordnung: int = 1) -> "TrigonometrischeFunktion":
        """
        Berechnet die Ableitung gegebener Ordnung.

        Args:
            ordnung: Ordnung der Ableitung (Standard: 1)

        Returns:
            Neue TrigonometrischeFunktion mit der abgeleiteten Funktion
        """
        # üî• UNIFIED ARCHITECTURE: Verwende Basis-Klassen-Properties üî•
        abgeleitet = diff(self.term_sympy, self._variable_symbol, ordnung)
        # Validiere das Ergebnis f√ºr exakte Berechnungen
        validate_function_result(abgeleitet, VALIDATION_EXACT)
        return TrigonometrischeFunktion(abgeleitet)

    def term(self) -> str:
        """Gibt den Term als String zur√ºck."""
        # üî• UNIFIED ARCHITECTURE: Verwende Basis-Klassen-Funktionalit√§t üî•
        return super().term()

    def term_latex(self) -> str:
        """Gibt den Term als LaTeX-String zur√ºck."""
        return latex(self.term_sympy)

    def periodenlaenge(self) -> float:
        """
        Berechnet die Periodenl√§nge f√ºr einfache trigonometrische Funktionen.

        Returns:
            Periodenl√§nge als float (oder None wenn nicht bestimmbar)
        """
        try:
            # Einfache Heuristik f√ºr grundlegende Funktionen
            term_str = str(self.term_sympy)

            if "sin(" in term_str or "cos(" in term_str:
                # Suche nach Koeffizienten vor x
                import re

                pattern = r"sin\(([^)]+)\)|cos\(([^)]+)\)"
                matches = re.findall(pattern, term_str)

                if matches:
                    for match in matches:
                        arg = match[0] if match[0] else match[1]
                        if "x" in arg:
                            # Finde den Koeffizienten von x
                            coeff_pattern = r"([+-]?\d*\.?\d*)\s*\*?\s*x"
                            coeff_match = re.search(coeff_pattern, arg)
                            if coeff_match:
                                coeff_str = coeff_match.group(1)
                                if (
                                    not coeff_str
                                    or coeff_str == "+"
                                    or coeff_str == "-"
                                ):
                                    coeff = 1.0 if coeff_str != "-" else -1.0
                                else:
                                    coeff = float(coeff_str)

                                if coeff != 0:
                                    return 2 * abs(3.14159265359 / coeff)

            # Standardperiodenl√§nge f√ºr sin(x), cos(x)
            if term_str in ["sin(x)", "cos(x)"]:
                return 2 * 3.14159265359

            return 0.0  # type: ignore

        except (AttributeError, ValueError, TypeError) as e:
            # Logge den Fehler f√ºr Debugging-Zwecke
            import logging

            logging.debug(
                f"Periodenl√§ngen-Berechnung fehlgeschlagen f√ºr {self.term()}: {e}"
            )
            return 0.0  # type: ignore

    def __str__(self):
        """String-Repr√§sentation."""
        return self.term()

    def __repr__(self):
        """Repr√§sentation f√ºr Debugging."""
        return f"TrigonometrischeFunktion('{self.original_eingabe}')"
