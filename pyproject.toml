[project]
name = "schul-analysis"
version = "0.1.0"
description = "Python Framework für Schul-Analysis mit Marimo-Integration"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "marimo>=0.16.3",
    "plotly>=6.3.0",
    "sympy>=1.14.0",
]

[dependency-groups]
# Development tools (nur für Entwickler)
dev = [
    "ruff>=0.13.2", # Linting & Formatting
    "ty>=0.0.1a21", # Type checking
    "pytest>=8.4.2", # Testing framework
    "pytest-cov>=7.0.0", # Test coverage
    "scipy>=1.16.2",
]

# Documentation (nur für Dokumentationserstellung)
docs = [
    "sphinx>=7.4.7",         # Documentation generator
    "sphinx-rtd-theme>=2.0.0", # Documentation theme
]

# Plotly-based visualization (Hauptvisualisierung - mathematisch korrekt)
viz-math = [
    "plotly>=6.3.0",         # Interactive plots (beste Wahl für Mathematik!)
    "numpy>=2.3.3",          # Numerical computing (required by Plotly)
]

# Altair-based visualization (Sekundär für statistische Diagramme)
viz-stats = [
    "altair>=5.5.0",         # Declarative visualization (secondary choice)
    "vega-datasets>=0.9.0",  # Example datasets for Altair
    "pandas>=2.3.3",        # Data manipulation (required by Altair)
]

# Static visualization (nur für Export/Statik)
viz-static = [
    "matplotlib>=3.10.6",   # Static plots (non-reactive)
    "seaborn>=0.13.2",     # Statistical plots (non-reactive)
]

# Type checking stubs (für bessere type safety)
types = [
    "types-requests>=2.32.0", # Type stubs for requests
]

[tool.ruff]
# Python Version
target-version = "py311"

# Line length
line-length = 88

# Enable rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments in functions
]

# Ignore rules
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=schul_analysis",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["schul_analysis"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
